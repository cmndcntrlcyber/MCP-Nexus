name: PR Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-check:
    runs-on: ubuntu-latest
    # This workflow runs for all PRs including Dependabot
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run check
        continue-on-error: true
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: 'postgresql://dummy:dummy@localhost:5432/dummy'
      
      - name: Check build output
        run: |
          echo "Build completed successfully"
          echo "Checking build artifacts..."
          ls -la dist/
          ls -la dist/public/
          
      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `âœ… **Build Check Passed**
            
            The application built successfully. Ready for review!
            
            Build artifacts:
            - Frontend: dist/public/
            - Server: dist/index.js`;
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Build Check')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
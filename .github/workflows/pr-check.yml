name: PR Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run check
        continue-on-error: true
      
      - name: Build application
        id: build
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: 'postgresql://dummy:dummy@localhost:5432/dummy'
      
      - name: Verify build output
        if: success()
        run: |
          echo "✅ Build completed successfully"
          echo "Checking build artifacts..."
          if [ -d "dist" ]; then
            echo "dist/ directory exists"
            ls -la dist/
          fi
          if [ -d "dist/public" ]; then
            echo "dist/public/ directory exists"
            ls -la dist/public/
          fi
      
      - name: Comment build status
        if: always() && github.actor != 'dependabot[bot]'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const success = '${{ steps.build.outcome }}' === 'success';
            const emoji = success ? '✅' : '❌';
            const status = success ? 'passed' : 'failed';
            
            const comment = `${emoji} **Build Check ${status}**
            
            ${success ? 'The application built successfully. Ready for review!' : 'The build failed. Please check the logs for details.'}
            
            Workflow run: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } catch (error) {
              console.log('Could not comment:', error.message);
            }